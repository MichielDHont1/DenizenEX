package com.denizenscript.denizen;

//import com.denizenscript.denizen.scripts.commands.entity.RemoveCommand;
import com.denizenscript.denizen.utilities.flags.PlayerFlagHandler;
import com.denizenscript.denizencore.objects.core.DurationTag;
import com.denizenscript.denizencore.utilities.CoreConfiguration;
import com.denizenscript.denizencore.utilities.CoreUtilities;
import com.denizenscript.denizencore.utilities.debugging.DebugSubmitter;
import net.minecraftforge.common.ForgeConfigSpec;

public class Config {
    public static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static final ForgeConfigSpec SPEC;
    public static final ForgeConfigSpec.ConfigValue<Integer> EXAMPLE_INTEGER;
    public static final ForgeConfigSpec.ConfigValue<Boolean> SHOW_DEBUG;
    public static final ForgeConfigSpec.ConfigValue<Boolean> EXTRA_DEBUG;
    public static final ForgeConfigSpec.ConfigValue<Boolean> VERBOSE_DEBUG;
    public static final ForgeConfigSpec.ConfigValue<Boolean> SHOW_LOADING_INFO;
    public static final ForgeConfigSpec.ConfigValue<Long> WARNING_RATE;
    public static final ForgeConfigSpec.ConfigValue<Boolean> SHOW_FUTURE_WARNING;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_LOGGING;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_FILECOPY;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_WEBGET;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_SQL;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_REDIS;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_MONGO;
    public static final ForgeConfigSpec.ConfigValue<Integer> MAX_WHILE_LOOPS;
    public static final ForgeConfigSpec.ConfigValue<Integer> TAG_TIMEOUT;
    public static final ForgeConfigSpec.ConfigValue<Boolean> TAG_TIMEOUT_WHEN_UNSAFE;
    public static final ForgeConfigSpec.ConfigValue<Boolean> TAG_TIMEOUT_WHEN_SILENT;
    public static final ForgeConfigSpec.ConfigValue<String> QUEUE_SPEED;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_CONSOLE_REDIRECTION;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_SAVING_OUTSIDE;
    public static final ForgeConfigSpec.ConfigValue<Boolean> SKIP_FLAG_CLEANING;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_RESTRICTED_ACTIONS;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_WEBSERVER;
    public static final ForgeConfigSpec.ConfigValue<String> WEBROOT;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_FILE_READ;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_FILE_WRITE;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_FILE_DELETE;
    public static final ForgeConfigSpec.ConfigValue<String> RESTRICTED_PATH;
    public static final ForgeConfigSpec.ConfigValue<Boolean> VERIFY_THREAD;
    public static final ForgeConfigSpec.ConfigValue<Boolean> QUEUE_ID_PREFIX;
    public static final ForgeConfigSpec.ConfigValue<Boolean> QUEU_ID_NUMERIC;
    public static final ForgeConfigSpec.ConfigValue<Boolean> QUEUE_ID_WORDS;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_LIST_FLAGS;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_READING_FIELDS;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_CORE_METHODS;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_SET_COMMAND;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_PRIVATE_FIELDS;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_FINAL_FIELDS;
    public static final ForgeConfigSpec.ConfigValue<Integer> DEBUG_LIMIT;
    public static final ForgeConfigSpec.ConfigValue<Integer> TRIM_LENGTH;
    public static final ForgeConfigSpec.ConfigValue<String> DEBUG_PREFIX;
    public static final ForgeConfigSpec.ConfigValue<Integer> DEBUG_LINE_LENGTH;
    public static final ForgeConfigSpec.ConfigValue<String > PASTE_URL;
    public static final ForgeConfigSpec.ConfigValue<String > SCRIPT_ENCODING;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_STUPID1;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_STUPID2;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_STUPID3;
    public static final ForgeConfigSpec.ConfigValue<Boolean> ALLOW_STUPIDX;
    public static final ForgeConfigSpec.ConfigValue<String > ALTERNATE_PATH;
    public static final ForgeConfigSpec.ConfigValue<Boolean> USE_ALTERNATE_PATH;



    static {
        BUILDER.push("Denizen config file");
        EXAMPLE_INTEGER = BUILDER.define("Example Integer", 0);
        SHOW_DEBUG = BUILDER.comment("print debug info.").define("Debug.show", true);
        EXTRA_DEBUG = BUILDER.define("Debug.Extra info", false);
        VERBOSE_DEBUG = BUILDER.define("Debug.Verbose", false);
        SHOW_LOADING_INFO = BUILDER.define("Debug.Show loading info", false);
        WARNING_RATE = BUILDER.define("Debug.Warning rate", (long)10000);
        SHOW_FUTURE_WARNING = BUILDER.define("Debug.Show future warnings", false);
        ALLOW_LOGGING = BUILDER.define("Commands.Log.Allow logging", true);
        ALLOW_FILECOPY = BUILDER.define("Commands.Filecopy.Allow copying files", true);
        ALLOW_WEBGET = BUILDER.define("Commands.Webget.Allow", true);
        ALLOW_SQL = BUILDER.define("Commands.SQL.Allow", true);
        ALLOW_REDIS = BUILDER.define("Commands.Redis.Allow", true);
        ALLOW_MONGO = BUILDER.define("Commands.Mongo.Allow", true);
        MAX_WHILE_LOOPS = BUILDER.define("Commands.While.Max loops", 10000);
        TAG_TIMEOUT = BUILDER.define("Tags.Timeout", 10);
        TAG_TIMEOUT_WHEN_UNSAFE = BUILDER.define("Tags.Timeout when unsafe", true);
        TAG_TIMEOUT_WHEN_SILENT = BUILDER.define("Tags.Timeout when silent", false);
        QUEUE_SPEED = BUILDER.define("Scripts.Queue speed", "instant");
        ALLOW_CONSOLE_REDIRECTION = BUILDER.define("Debug.Allow console redirection", false);
        ALLOW_SAVING_OUTSIDE = BUILDER.define("Commands.Yaml.Allow saving outside folder", false);
        SKIP_FLAG_CLEANING = BUILDER.define("Saves.Skip flag cleaning", false);
        ALLOW_RESTRICTED_ACTIONS = BUILDER.define("Commands.Security.Allow restricted actions", false);
        ALLOW_WEBSERVER = BUILDER.define("Commands.WebServer.Allow", false);
        WEBROOT = BUILDER.define("Commands.WebServer.Webroot", "webroot/");
        ALLOW_FILE_READ = BUILDER.define("Commands.File.Allow read", false);
        ALLOW_FILE_WRITE = BUILDER.define("Commands.File.Allow write", false);
        ALLOW_FILE_DELETE = BUILDER.define("Commands.Delete.Allow file deletion", true);
        RESTRICTED_PATH = BUILDER.define("Commands.File.Restrict path", "data/");
        VERIFY_THREAD = BUILDER.define("Debug.Verify thread", false);
        QUEUE_ID_PREFIX = BUILDER.define("Queues.Id parts.Prefix", true);
        QUEU_ID_NUMERIC = BUILDER.define("Queues.Id parts.Numeric", true);
        QUEUE_ID_WORDS = BUILDER.define("Queues.Id parts.Words", true);
        ALLOW_LIST_FLAGS = BUILDER.define("Tags.List flags.I know what im doing and need this", false);
        ALLOW_READING_FIELDS = BUILDER.define("Reflection.Allow reading fields", true);
        ALLOW_CORE_METHODS = BUILDER.define("Reflection.Allow core methods", true);
        ALLOW_SET_COMMAND = BUILDER.define("Reflection.Allow set command", false);
        ALLOW_PRIVATE_FIELDS = BUILDER.define("Reflection.Allow set private fields", false);
        ALLOW_FINAL_FIELDS = BUILDER.define("Reflection.Allow set final fields", false);
        DEBUG_LIMIT = BUILDER.define("Debug.Limit per tick", 5000);
        TRIM_LENGTH = BUILDER.define("Debug.Trim length limit", 1024);
        DEBUG_PREFIX = BUILDER.define("Debug.Prefix", "");
        DEBUG_LINE_LENGTH = BUILDER.define("Debug.Line length", 300);
        PASTE_URL = BUILDER.define("Debug.Paste URL", DebugSubmitter.corePasteURL);
        SCRIPT_ENCODING = BUILDER.define("Scripts.Encoding", "default");
        ALLOW_STUPID1 = BUILDER.define("Commands.General.Allow unrestricted file access", false);
        ALLOW_STUPID2 = BUILDER.define("Commands.General.Confirm allowing unrestricted file access", false);
        ALLOW_STUPID3 = BUILDER.define("Commands.General.Unrestricted file access is very bad and dangerous are you sure you want that", false);
        ALLOW_STUPIDX = BUILDER.define("Commands.General.Don't change this unrestricted file access option though", false);
        USE_ALTERNATE_PATH = BUILDER.define("Scripts location.Use default script folder", true);
        ALTERNATE_PATH = BUILDER.define("Scripts location.Alternative folder path", "mods/DenizenEX");

        //other config
//        skipChunkFlagCleaning = config.getBoolean("Saves.Skip chunk flag cleaning", false);
//        nullifySkullSkinIds = config.getBoolean("Tags.Nullify skull skin ids", false);
//        worldPlayerDataSaveDelay = (float) DurationTag.valueOf(config.getString("Save world player file delay", "10s"), CoreUtilities.basicContext).getSeconds();
//        worldPlayerDataMaxCacheTicks = DurationTag.valueOf(config.getString("World player data max cache", "1h"), CoreUtilities.basicContext).getTicks();
//        cache_overrideHelp = config.getBoolean("Debug.Override help", true);
//        cache_showExHelp = config.getBoolean("Debug.Ex command help", true);
//        cache_showExDebug = config.getBoolean("Debug.Ex command debug", true);
//        cache_canRecordStats = config.getBoolean("Debug.Stats", true);
//        cache_defaultDebugMode = config.getBoolean("Debug.Container default", true);
//        cache_warnOnAsyncPackets = config.getBoolean("Debug.Warn on async packets", false);
//        cache_interactQueueSpeed = config.getString("Scripts.Interact.Queue speed", "0.5s");
//        cache_healthTraitEnabledByDefault = config.getBoolean("Traits.Health.Enabled", false);
//        cache_healthTraitRespawnEnabled = config.getBoolean("Traits.Health.Respawn.Enabled", true);
//        cache_healthTraitAnimatedDeathEnabled = config.getBoolean("Traits.Health.Animated death.Enabled", true);
//        cache_healthTraitRespawnDelay = config.getString("Traits.Health.Respawn.Delay", "10s");
//        cache_healthTraitBlockDrops = config.getBoolean("Traits.Health.Block drops", false);
//        cache_engageTimeoutInSeconds = config.getString("Commands.Engage.Timeout", "150s");
//        cache_createWorldSymbols = config.getBoolean("Commands.CreateWorld.Allow symbols in names", false);
//        cache_createWorldWeirdPaths = config.getBoolean("Commands.CreateWorld.Allow weird paths", false);
//        cache_allowServerStop = config.getBoolean("Commands.Restart.Allow server stop", false);
//        cache_allowServerRestart = config.getBoolean("Commands.Restart.Allow server restart", true);
//        cache_limitPath = config.getString("Commands.Yaml.Limit path", "none");
//        cache_chatMultipleTargetsFormat = config.getString("Commands.Chat.Options.Multiple targets format", "%target%, %target%, %target%, and others");
//        cache_chatBystandersRange = config.getDouble("Commands.Chat.Options.Range for bystanders", 5.0);
//        cache_chatNoTargetFormat = config.getString("Commands.Chat.Formats.No target", "[<[talker].name>]: <[message]>");
//        cache_chatToTargetFormat = config.getString("Commands.Chat.Formats.To target", "[<[talker].name>] -> You: <[message]>");
//        cache_chatWithTargetToBystandersFormat = config.getString("Commands.Chat.Formats.With target to bystanders", "[<[talker].name>] -> <[target].name>: <[message]>");
//        cache_chatWithTargetsToBystandersFormat = config.getString("Commands.Chat.Formats.With targets to bystanders", "[<[talker].name>] -> [<[targets]>]: <[message]>");
//        cache_chatAsynchronous = config.getBoolean("Triggers.Chat.Use asynchronous event", false);
//        cache_chatToNpcFormat = config.getString("Triggers.Chat.Formats.Player to NPC", "You -> <npc.nickname>: <text>");
//        cache_chatToNpcOverheardFormat = config.getString("Triggers.Chat.Formats.Player to NPC overheard", "<player.name> -> <npc.nickname>: <text>");
//        cache_chatToNpcOverhearingRange = config.getDouble("Triggers.Chat.Overhearing range", 4);
//        cache_chatMustSeeNPC = config.getBoolean("Triggers.Chat.Prerequisites.Must be able to see NPC", true);
//        cache_chatMustLookAtNPC = config.getBoolean("Triggers.Chat.Prerequisites.Must be looking in direction of NPC", true);
//        cache_chatGloballyIfFailedChatTriggers = config.getBoolean("Triggers.Chat.Appears globally.If triggers failed", false);
//        cache_chatGloballyIfNoChatTriggers = config.getBoolean("Triggers.Chat.Appears globally.If triggers missing", true);
//        cache_chatGloballyIfUninteractable = config.getBoolean("Triggers.Chat.Appears globally.If NPC uninteractable", true);
//        cache_worldScriptChatEventAsynchronous = config.getBoolean("Scripts.World.Events.On player chats.Use asynchronous event", false);
//        cache_worldScriptTimeEventFrequency = DurationTag.valueOf(config.getString("Scripts.World.Events.On time changes.Frequency of check", "250t"), CoreUtilities.basicContext);
//        cache_blockTagsMaxBlocks = config.getInt("Tags.Block tags.Max blocks", 1000000);
//        cache_chatHistoryMaxMessages = config.getInt("Tags.Chat history.Max messages", 10);
//        cache_packetInterception = config.getBoolean("Packets.Interception", true);
//        cache_packetInterceptAutoInit = config.getBoolean("Packets.Auto init", false);
//        cache_commandScriptAutoInit = config.getBoolean("Scripts.Command.Auto init", false);
//        cache_legacySpigotNamesSupport = config.getBoolean("Scripts.Support legacy Spigot names", true);
//        PlayerFlagHandler.cacheTimeoutSeconds = config.getLong("Saves.Offline player cache timeout", 300);
//        PlayerFlagHandler.asyncPreload = config.getBoolean("Saves.Load async on login", true);
//        PlayerFlagHandler.saveOnlyWhenWorldSaveOn = config.getBoolean("Saves.Only save if world save is on", false);
//        RemoveCommand.alwaysWarnOnMassRemove = config.getBoolean("Commands.Remove.Always warn on mass delete", false);

        BUILDER.pop();
        SPEC = BUILDER.build();
    }
}