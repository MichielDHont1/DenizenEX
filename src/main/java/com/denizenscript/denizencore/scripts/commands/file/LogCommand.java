package com.denizenscript.denizencore.scripts.commands.file;

import com.denizenscript.denizencore.scripts.commands.Holdable;
import com.denizenscript.denizencore.scripts.commands.generator.*;
import com.denizenscript.denizencore.utilities.CoreConfiguration;
import com.denizenscript.denizencore.utilities.debugging.DebugLog;
import com.denizenscript.denizencore.utilities.debugging.Debug;
import com.denizenscript.denizencore.DenizenCore;
import com.denizenscript.denizencore.scripts.ScriptEntry;
import com.denizenscript.denizencore.scripts.commands.AbstractCommand;

import java.io.File;
import java.io.FileWriter;
import java.net.URLDecoder;

public class LogCommand extends AbstractCommand implements Holdable {

    public LogCommand() {
        setName("log");
        setSyntax("log [<text>] (type:{info}/severe/warning/fine/finer/finest/none/clear) [file:<name>]");
        setRequiredArguments(2, 3);
        isProcedural = false;
        autoCompile();
    }

    // <--[command]
    // @Name Log
    // @Syntax log [<text>] (type:{info}/severe/warning/fine/finer/finest/none/clear) [file:<name>]
    // @Required 2
    // @Maximum 3
    // @Short Logs some debugging info to a file.
    // @Synonyms TextFile
    // @Group file
    //
    // @Description
    // This is a quick and simple way to store debugging information for admins to read.
    //
    // You just input a file name and some text, and it will store that information in the file with a date/time stamp and the chosen type ('INFO' by default).
    // If you don't want the date/time stamp and type, you can set the type to 'none' and it will only add the message text.
    //
    // Regardless of type, each usage of the log command will add a new line to the file, you can't just keep adding to one line.
    //
    // You might choose to use this to record some important things,
    // for example, every time a player uses a dangerous command you might log the player's name and their location, so you'll know who to blame if you find something damaged.
    //
    // Remember that the file location is inside the server's primary folder. You most likely want to prefix file names with a folder name, For example: 'file:logs/security.log'
    //
    // If the file or folder path you input do not already exist, they will be automatically created.
    //
    // Warning: Remember that file operations are dangerous! A typo in the filename could ruin your server.
    // It's recommended you use this command minimally.
    //
    // This command can be disabled by setting Denizen config option "Commands.Log.Allow logging" to false.
    //
    // This should almost always be ~waited for. Refer to <@link language ~waitable>.
    //
    // @Tags
    // None
    //
    // @Usage
    // Use to log some information to a file.
    // - ~log "Security breach on level 3!" type:severe file:securitylog.txt
    //
    // @Usage
    // Use to log a player's name and location when they did something dangerous.
    // - ~log "<player.name> used the '/EXPLODE' command at <player.location.simple>!" type:warning file:security.log
    //
    // @Usage
    // Use to write information directly to a file.
    // - ~log "This won't have a date or type" type:none file:example.log
    //
    // @Usage
    // Use to clear a log file and write some text at the start.
    // - ~log "// Log File Generated by my Denizen script, do not edit!" type:clear file:myfile.log
    //
    // @Usage
    // Use to clear a log file entirely.
    // - ~log "" type:clear file:myfile.log
    // -->

    public enum Type {SEVERE, INFO, WARNING, FINE, FINER, FINEST, NONE, CLEAR}

    public static void autoExecute(ScriptEntry scriptEntry,
                                   @ArgRaw @ArgLinear @ArgName("message") String message,
                                   @ArgPrefixed @ArgName("file") String fileName,
                                   @ArgPrefixed @ArgName("type") @ArgDefaultText("info") Type type) {
        if (!CoreConfiguration.allowLog) {
            Debug.echoError("Logging disabled by administrator (refer to command documentation).");
            scriptEntry.setFinished(true);
            return;
        }
        String directory = URLDecoder.decode(System.getProperty("user.dir"));
        File file = new File(directory, fileName);
        if (!DenizenCore.implementation.canWriteToFile(file)) {
            Debug.echoError("Cannot write to that file path due to security settings in Denizen/config.yml.");
            scriptEntry.setFinished(true);
            return;
        }
        String output = message;
        Runnable run = () -> {
            try {
                file.getParentFile().mkdirs();
                if (type == Type.NONE) {
                    FileWriter fw = new FileWriter(file, true);
                    fw.write(output + "\n");
                    fw.close();
                    return;
                }
                else if (type == Type.CLEAR) {
                    FileWriter fw = new FileWriter(file);
                    if (output.length() > 0) {
                        fw.write(output + "\n");
                    }
                    fw.close();
                    return;
                }
                DebugLog log = new DebugLog("Denizen-ScriptLog-" + fileName, file.getAbsolutePath());
                switch (type) {
                    case SEVERE:
                        log.severe(output);
                        break;
                    case INFO:
                        log.info(output);
                        break;
                    case WARNING:
                        log.warning(output);
                        break;
                    case FINE:
                        log.fine(output);
                        break;
                    case FINER:
                        log.finer(output);
                        break;
                    case FINEST:
                        log.finest(output);
                }
                log.close();
            }
            catch (Throwable ex) {
                DenizenCore.runOnMainThread(() -> {
                    Debug.echoError(scriptEntry, "Error logging to file...");
                    Debug.echoError(scriptEntry, ex);
                });
            }
            finally {
                scriptEntry.setFinished(true);
            }
        };
        if (scriptEntry.shouldWaitFor()) {
            DenizenCore.runAsync(run);
        }
        else {
            run.run();
        }
    }
}
